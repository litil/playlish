import { takeEvery, call, put } from 'redux-saga/effects';
import * as actions from '../actions/actionTypes.js';
import axios from 'axios';
import { addTracksPlaylistRequest } from '../actions/addTracksToPlaylistAction';

// watcher saga: watches for actions dispatched to the store, starts worker saga
export function* createPlaylistWatcherSaga() {
  yield takeEvery(actions.CREATE_PLAYLIST_REQUEST, workerSaga);
}

// function that makes the api request and returns a Promise for response
function createPlaylist(userId, tracks, playlistName, accessToken) {
  // curl -X POST "https://api.spotify.com/v1/users/thelinmichael/playlists"
  //      -H "Authorization: Bearer {your access token}"
  //      -H "Content-Type: application/json"
  //      --data "{\"name\":\"A New Playlist\", \"public\":false}"
  return axios({
    method: 'post',
    baseURL: 'https://api.spotify.com/v1',
    url: `users/${userId}/playlists`,
    headers: {
      Authorization: 'Bearer ' + accessToken,
      'Content-Type': 'application/json'
    },
    data: {
      name: `${playlistName} - by Playlish`,
      public: false,
      collaborative: false,
      description: 'Generated by Playlish - Top tracks of searched artists'
    }
  });
}

// worker saga: makes the api call when watcher saga sees the action
function* workerSaga(action) {
  try {
    console.log('action', action);
    const { userId, tracks, playlistName, accessToken } = action;
    const response = yield call(
      createPlaylist,
      userId,
      tracks,
      playlistName,
      accessToken
    );

    if (response.error) throw response.error;

    // dispatch a success action to the store with the list of transactions
    yield put({
      type: actions.CREATE_PLAYLIST_SUCCESS,
      response
    });

    const playlist = response.data;
    yield put(addTracksPlaylistRequest(playlist.id, tracks, accessToken));
  } catch (error) {
    yield put({
      type: actions.CREATE_PLAYLIST_FAILURE,
      error
    });
  }
}
